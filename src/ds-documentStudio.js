function doGet() {
  return HtmlService.createHtmlOutputFromFile('html/document-studio');
}

/*
 * Gsuite Morph Tools - Morph Document Studio 1.9
 * Developed by alsanchezromero
 * Created on Mon Jul 25 2022
 *
 * Copyright (c) 2022 Morph Estudio
*/

function documentStudio(rowData) {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getActiveSheet();

  let formData = [
    rowData.dsActivate,
    rowData.emailActivate,

    rowData.greenCells,
    rowData.templateID,

    rowData.destFolder,
    rowData.fileName,
    rowData.exportFormat,
    rowData.permission1,
    rowData.permission2,
    rowData.permission3,
    rowData.numSwitch,

    rowData.emailField,
    rowData.emailSpecific,
    rowData.emailSender,
    rowData.emailSubject,
    rowData.emailBCC,
    rowData.emailReplyTo,
    rowData.emailMessage,
    rowData.emailAttach,
    rowData.emailAttachField,

  ];

  let [dsActivate, emailActivate, greenCells, docURL, destFolderURL, fileName, exportFormat, permission1, permission2, permission3, numSwitch, emailField, emailSpecific, emailSender, emailSubject, emailBCC, emailReplyTo, emailMessage, emailAttach, emailAttachField] = formData;

  Logger.log(dsActivate); Logger.log(emailActivate);

  let userMail = Session.getActiveUser().getEmail();
  let dateNow = Utilities.formatDate(new Date(), 'GMT+2', 'dd/MM/yyyy - HH:mm:ss');

  let rows = sh.getDataRange().getValues();
  let lastColmn = sh.getLastColumn();
  let urlCell = lastColmn;
  let nameCell = urlCell - 1;
  let fin = nameCell - 1;

  let docID; let destFolderID;

  if (greenCells) {
    docURL = sh.getRange(1, nameCell).getNotes();
    docID = getIdFromUrl(docURL[0][0]);
    destFolderURL = sh.getRange(1, urlCell).getNotes();
    destFolderID = getIdFromUrl(destFolderURL[0][0]);
  } else {
    docID = getIdFromUrl(docURL);
    destFolderID = getIdFromUrl(destFolderURL);
  }

  // Create temporal folder if destFolder is empty

  let destinationFolder;
  if (destFolderID === '') {
    let rootFolder = DriveApp.getRootFolder();
    destinationFolder = rootFolder.createFolder('Morph Tools Files');
  } else {
    destinationFolder = DriveApp.getFolderById(destFolderID);
  }

  // Get Markers Internally

  let dataReturn = getInternallyMarkers(docID);

  let markersData = [
    dataReturn.docMarkers,
    dataReturn.gDocTemplate,
    dataReturn.fileType,
  ];

  let [docMarkers, gDocTemplate, fileType] = markersData;

  if (dsActivate) {

  // Body Iteration
  var doc; var newNames; var headerValues; var value;

  rows.forEach((row, index) => {
    if (index === 0) return; // Check if this row is the headers, if so we skip it
    if (row[sh.getLastColumn() - 1]) return; // Check if a document has already been generated by looking at 'Document Link', if so we skip it
    let copy = gDocTemplate.makeCopy(fileName, destinationFolder); // Copy of Template (`DS ${row[0]}, ${row[1]}`, destinationFolder)
    let copyId = copy.getId();

    switch (fileType) {
      case MimeType.GOOGLE_DOCS:
        doc = DocumentApp.openById(copy.getId()); // Open Copy using DocumentApp

        for (var i = 0; i < lastColmn; i += 1) {
          headerValues = sh.getRange(1, i + 1).getValue();
          newNames = doc.getName().replace(`${`{{${headerValues}}}`}`, row[i]);
          doc.setName(newNames);
        }

        var body = doc.getBody(); // Get content of doc

        // Text Replacing

        var customWidth; var checkURL; var checkIMG; var imageID; var imageFile; var imageType; var image; var response; var width;

        for (var i = 0; i < fin; i += 1) {
          headerValues = sh.getRange(1, i + 1).getValue();
          value = sh.getRange(index + 1, i + 1).getValue().toString();
          let output = [];
          if (value.includes('{w=')) {
            let t = value.split('{w=');
            t.forEach((q) => {
              output.push([q]);
            });
            value = output[0].toString();
            width = parseInt(output[1].toString().replace('}', ''), 10).toFixed(0);
            customWidth = true;
          } else { customWidth = false; }

          let replaceText = `${`{{${headerValues}}}`}`;
          checkURL = isValidHttpUrl(`${value}`);
          checkIMG = isImage(`${value}`);

          if (checkURL == true) {
            if (value.indexOf('drive.google.com/file') > -1) {
              imageID = getIdFromUrl(value);
              imageFile = DriveApp.getFileById(imageID);
              imageType = imageFile.getMimeType();

              if (imageType == 'JPEG', 'PNG', 'GIF') {
                imageFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
                image = DriveApp.getFileById(imageID).getBlob();

                if (customWidth == false) {
                  imageFromTextDocs(body, replaceText, image);
                } else {
                  imageFromTextDocsCustomWidth(body, replaceText, image, width);
                }
              }
            } else if (checkIMG == true) {
              response = UrlFetchApp.fetch(`${`${value}`}`);
              image = response.getBlob();

              if (customWidth == false) {
                imageFromTextDocs(body, replaceText, image);
              } else {
                imageFromTextDocsCustomWidth(body, replaceText, image, width);
              }
            } else {
              replaceDocText(`${`{{${headerValues}}}`}`, `${row[i]}`, copyId);
            }
          } else {
            replaceDocText(`${`{{${headerValues}}}`}`, `${row[i]}`, copyId);
          }
        }

        break;
      case MimeType.GOOGLE_SLIDES:
        doc = SlidesApp.openById(copy.getId());

        for (let i = 0; i < lastColmn; i += 1) {
          headerValues = sh.getRange(1, i + 1).getValue();
          newNames = doc.getName().replace(`${`{{${headerValues}}}`}`, row[i]);
          doc.setName(newNames);
        }

        let slides = doc.getSlides();

        // TEXT REPLACING

        for (let i = 0; i < fin; i += 1) {
          headerValues = sh.getRange(1, i + 1).getValue();
          var searchText = `${`{{${headerValues}}}`}`;
          value = sh.getRange(index + 1, i + 1).getValue().toString();
          checkURL = isValidHttpUrl(`${value}`);
          checkIMG = isImage(`${value}`);

          if (checkURL == true) {
            if (value.indexOf("drive.google.com/file") > -1) {
              imageID = getIdFromUrl(value);
              imageFile = DriveApp.getFileById(imageID);
              imageType = imageFile.getMimeType();

              if (imageType == 'JPEG', 'PNG', 'GIF') {
                imageFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
                image = DriveApp.getFileById(imageID).getBlob();
                imageFromTextSlides(slides, searchText, image);
              }
            } else if (checkIMG == true) {
              //var imageUrl = `${''+value}`;
              response = UrlFetchApp.fetch(`${`${value}`}`);
              image = response.getBlob();
              imageFromTextSlides(slides, searchText, image);
            } else {
              replaceSlideText(slides, `${row[i]}`, `${`{{${headerValues}}}`}`, copyId);
            }
          } else {
            replaceSlideText(slides, `${row[i]}`, `${`{{${headerValues}}}`}`, copyId);
          }
        }
        break;
      default:
    }

    // Export Options

    let url; let newDocID;
    switch (exportFormat) {
      case 'PDF':
        doc.saveAndClose();
        newDocID = doc.getId();
        let templateFile = DriveApp.getFileById(newDocID);
        let theBlob = templateFile.getBlob().getAs('application/pdf');
        doc = destinationFolder.createFile(theBlob);
        copy.setTrashed(true); // Delete the original file
        break;
      case 'KEEP':
        url = doc.getUrl();
        newDocID = doc.getId();
        doc.saveAndClose();
        doc = DriveApp.getFileById(newDocID);
        break;
      default:
    }

    // Autonumeration

    if (numSwitch) {
      newNames = `${newNames}_${String(index).padStart(3, '0')}`;
      doc.setName(newNames);
    }

    url = doc.getUrl();
    sh.getRange(index + 1, nameCell).setValue(`=hyperlink("${url}","${newNames}")`); // Filename Link Cell
    sh.getRange(index + 1, urlCell).setValue(url).setNote(null).setNote(`Actualizado por ${userMail} el ${dateNow}`); // URL Link Cell

    // File Permission

    if (permission2) {
      doc.setSharing(DriveApp.Access.DOMAIN, DriveApp.Permission.VIEW);
    }
    if (permission3) {
      doc.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
    }
  });
  } // if ds-activate bracket

  if (emailActivate) {
    // Get index of selected columns

    let dropdownValues = emailDropdown();
    dropdownValues = flatten(dropdownValues);

    let indexEmail; let indexFile; let indexNumber;

    indexEmail = fieldIndex(dropdownValues, emailField);
    indexFile = fieldIndex(dropdownValues, emailAttachField);

    //let emailValues = getColumn(sh, indexEmail); Logger.log('emval' + emailValues);
    //let fileValues = getColumn(sh, indexFile); Logger.log('fileval' + fileValues);

    // Replace in subject and message

    let headerValues; let fileID; let file; let adress; let emailSubjectReplaced; let emailMessageReplaced;

    let dropdownValuesWithMarker = dropdownValues.map(i => '{{' + i + '}}');
    //Logger.log('Con marcadores: '+ dropdownValuesWithMarker);

    rows.forEach((row, index) => {
      Logger.log(row[indexEmail]);
      Logger.log(row[indexFile]);
      if (index === 0) return; // Check if this row is the headers, if so we skip it
      if (row[indexEmail] === '') return;

      if (dropdownValuesWithMarker.some(v => emailSubject.includes(v)) || dropdownValuesWithMarker.some(v => emailMessage.includes(v))) {
        for (var i = 0; i < lastColmn; i += 1) {
          headerValues = sh.getRange(1, i + 1).getValue();
          headerValues = `${`{{${headerValues}}}`}`;
          if (emailSubject.indexOf(headerValues) > -1) {
            emailSubjectReplaced = emailSubject.replace(headerValues, row[i]);
          }
          if (emailMessage.indexOf(headerValues) > -1) {
            emailMessageReplaced = emailMessage.replace(headerValues, row[i]);
          }
        };
      } else {
        emailSubjectReplaced = emailSubject;
        emailMessageReplaced = emailMessage;
      }

      // Set emails

      adress = row[indexEmail];
      fileID = getIdFromUrl(row[indexFile]); // Logger.log(fileID);
      file = DriveApp.getFileById(fileID[0]);

      MailApp.sendEmail({
        to: adress,
        subject: emailSubjectReplaced || 'Morph Document Studio',
        name: emailSender || 'Morph Estudio',
        cc: emailSpecific,
        bcc: emailBCC,
        replyTo: emailReplyTo,
        htmlBody: emailMessageReplaced || 'Este correo ha sido enviado automáticamente desde el Google Workspace de Morph Estudio.',
        attachments: [file],
      });
      
    });

  } // if email-activate bracket
}

function getInternallyMarkers(docID) {
  let identifier = {
    start: '{{',
    start_include: true,
    end: '}}',
    end_include: true,
  };

  let gDocTemplate = DriveApp.getFileById(docID);
  let fileType = gDocTemplate.getMimeType();
  let docMarkers;

  switch (fileType) {
    case MimeType.GOOGLE_DOCS:
      docMarkers = getDocItems(docID, identifier).sort();
      break;
    case MimeType.GOOGLE_SLIDES:
      docMarkers = getSlidesItems(docID, identifier).sort();
      break;
    default:
  }

  let dataReturn = {
    docMarkers,
    gDocTemplate,
    fileType,
  };
  return dataReturn;
}

function emailDropdown() { // If dropdown options are in a Google Sheet
  const ss = SpreadsheetApp.getActive();
  let sh = ss.getActiveSheet();
  let dropdownValues = sh.getRange(1, 1, 1, sh.getLastColumn()).getValues(); 
  dropdownValues = transpose(dropdownValues);
  return dropdownValues;
}

function fieldIndex(dropdownValues, fieldName) {
  dropdownValues.forEach((col, index) => {
    if (col.indexOf(fieldName) > -1) {
      indexNumber = index;
    }
  });
  return indexNumber;
}

function getColumn(sh, index) {
  let values = sh.getRange(2, index + 1, sh.getLastRow() - 1, 1).getValues();
  values = values.filter(String).length;
  values = sh.getRange(2, index + 1, values, 1).getValues();
  values = flatten(values);
  return values;
}
