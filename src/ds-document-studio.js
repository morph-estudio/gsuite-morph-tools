/**
 * Gsuite Morph Tools - Morph Document Studio 1.5.0
 * Developed by alsanchezromero
 *
 * Copyright (c) 2022 Morph Estudio
 */

function documentStudio(rowData) {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getActiveSheet();

  let formData = [
    rowData.dsActivate,
    rowData.emailActivate,

    rowData.templateID,
    rowData.greenCells,

    rowData.destinationFolder,
    rowData.fileName,
    rowData.exportFormat,
    rowData.permission1,
    rowData.permission2,
    rowData.permission3,
    rowData.numerationSwitch,

    rowData.emailField,
    rowData.emailSpecific,
    rowData.emailSender,
    rowData.emailSubject,
    rowData.emailMoreFields,
    rowData.emailBCC,
    rowData.emailReplyTo,
    rowData.emailMessage,
    rowData.emailAttachSwitch,
    rowData.emailAttachField,

    rowData.allDocuments,
    rowData.allEmails,
  ];

  let [dsActivate, emailActivate, templateID, greenCells, destinationFolder, fileName, exportFormat, permission1, permission2, permission3, numerationSwitch, emailField, emailSpecific, emailSender, emailSubject, emailMoreFields, emailBCC, emailReplyTo, emailMessage, emailAttachSwitch, emailAttachField, allDocuments, allEmails] = formData;

  let userMail = Session.getActiveUser().getEmail();
  let dateNow = Utilities.formatDate(new Date(), 'GMT+2', 'dd/MM/yyyy - HH:mm:ss');

  let filenameField = '[DS] Files'; let fileurlField = '[DS] File-links'; let mailurlField = '[DS] Email-links';

  let dataReturn = getGreenColumns(sh, filenameField, fileurlField);
  let indexData = [
    dataReturn.indexNameCell,
    dataReturn.indexUrlCell,
  ];

  let [indexNameCell, indexUrlCell] = indexData;

  /*
   * CODE MARKER
   * Init Document Merge
  */

  if (dsActivate) {
    let docID; let destFolderID;

    if (greenCells) {
      templateID = sh.getRange(1, indexNameCell + 1).getNotes();
      docID = getIdFromUrl(templateID[0][0]);
      destinationFolder = sh.getRange(1, indexUrlCell + 1).getNotes();
      destFolderID = getIdFromUrl(destinationFolder[0][0]);
      destinationFolder = DriveApp.getFolderById(destFolderID);
    } else {
      docID = getIdFromUrl(templateID);
      if (destinationFolder === '') {
        let rootFolder = DriveApp.getRootFolder(); // Create temporal folder if destFolder is empty
        destinationFolder = rootFolder.createFolder('Morph Document Studio Files');
      } else {
          destFolderID = getIdFromUrl(destinationFolder);
          destinationFolder = DriveApp.getFolderById(destFolderID);
      }
    }

    // Body Iteration

    let lastColmn = sh.getLastColumn();
    let gDocTemplate = DriveApp.getFileById(docID);
    let fileType = gDocTemplate.getMimeType();

    SpreadsheetApp.flush();
    let rows = sh.getDataRange().getValues();

    var doc; var newNames; var headerValues; var value;

    rows.forEach((row, index) => {
      if (index === 0) return; // Check if this row is the headers, if so we skip it
      if (allDocuments === false) { if (row[indexUrlCell]) return } // Check if a document has already been generated by looking at 'Document Link', if so we skip it

      let copy = gDocTemplate.makeCopy(fileName, destinationFolder); // Copy of Template (`DS ${row[0]}, ${row[1]}`, destinationFolder)
      let copyId = copy.getId();

      switch (fileType) {
        case MimeType.GOOGLE_DOCS:
          doc = DocumentApp.openById(copy.getId()); // Open Copy using DocumentApp

          for (var i = 0; i < lastColmn; i += 1) {
            headerValues = sh.getRange(1, i + 1).getValue();
            newNames = doc.getName().replace(`${`{{${headerValues}}}`}`, row[i]);
            doc.setName(newNames);
          }

          var body = doc.getBody(); // Get content of doc

          // Text Replacing

          var customWidth; var checkURL; var checkIMG; var imageID; var imageFile; var imageType; var image; var response; var width;

          for (var i = 0; i < indexNameCell - 1; i += 1) {
            headerValues = sh.getRange(1, i + 1).getValue();
            value = sh.getRange(index + 1, i + 1).getValue().toString();
            let output = [];
            if (value.includes('{w=')) {
              let t = value.split('{w=');
              t.forEach((q) => {
                output.push([q]);
              });
              value = output[0].toString();
              width = parseInt(output[1].toString().replace('}', ''), 10).toFixed(0);
              customWidth = true;
            } else { customWidth = false; }

            let replaceText = `${`{{${headerValues}}}`}`;
            checkURL = isValidHttpUrl(`${value}`);
            checkIMG = isImage(`${value}`);

            if (checkURL == true) {
              if (value.indexOf('drive.google.com/file') > -1) {
                imageID = getIdFromUrl(value);
                imageFile = DriveApp.getFileById(imageID);
                imageType = imageFile.getMimeType();

                if (imageType == 'JPEG', 'PNG', 'GIF') {
                  imageFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
                  image = DriveApp.getFileById(imageID).getBlob();

                  if (customWidth == false) {
                    imageFromTextDocs(body, replaceText, image);
                  } else {
                    imageFromTextDocsCustomWidth(body, replaceText, image, width);
                  }
                }
              } else if (checkIMG == true) {
                response = UrlFetchApp.fetch(`${`${value}`}`);
                image = response.getBlob();

                if (customWidth == false) {
                  imageFromTextDocs(body, replaceText, image);
                } else {
                  imageFromTextDocsCustomWidth(body, replaceText, image, width);
                }
              } else {
                replaceDocText(`${`{{${headerValues}}}`}`, `${row[i]}`, copyId);
              }
            } else {
              replaceDocText(`${`{{${headerValues}}}`}`, `${row[i]}`, copyId);
            }
          }

          break;
        case MimeType.GOOGLE_SLIDES:
          doc = SlidesApp.openById(copy.getId());

          for (let i = 0; i < lastColmn; i += 1) {
            headerValues = sh.getRange(1, i + 1).getValue();
            newNames = doc.getName().replace(`${`{{${headerValues}}}`}`, row[i]);
            doc.setName(newNames);
          }

          let slides = doc.getSlides();

          // TEXT REPLACING

          for (let i = 0; i < indexNameCell - 1; i += 1) {
            headerValues = sh.getRange(1, i + 1).getValue();
            var searchText = `${`{{${headerValues}}}`}`;
            value = sh.getRange(index + 1, i + 1).getValue().toString();
            checkURL = isValidHttpUrl(`${value}`);
            checkIMG = isImage(`${value}`);

            if (checkURL == true) {
              if (value.indexOf("drive.google.com/file") > -1) {
                imageID = getIdFromUrl(value);
                imageFile = DriveApp.getFileById(imageID);
                imageType = imageFile.getMimeType();

                if (imageType == 'JPEG', 'PNG', 'GIF') {
                  imageFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
                  image = DriveApp.getFileById(imageID).getBlob();
                  imageFromTextSlides(slides, searchText, image);
                }
              } else if (checkIMG == true) {
                //var imageUrl = `${''+value}`;
                response = UrlFetchApp.fetch(`${`${value}`}`);
                image = response.getBlob();
                imageFromTextSlides(slides, searchText, image);
              } else {
                replaceSlideText(slides, `${row[i]}`, `${`{{${headerValues}}}`}`, copyId);
              }
            } else {
              replaceSlideText(slides, `${row[i]}`, `${`{{${headerValues}}}`}`, copyId);
            }
          }
          break;
        default:
      }

      // Export Options

      let url; let newDocID;
      switch (exportFormat) {
        case 'PDF':
          doc.saveAndClose();
          newDocID = doc.getId();
          let templateFile = DriveApp.getFileById(newDocID);
          let theBlob = templateFile.getBlob().getAs('application/pdf');
          doc = destinationFolder.createFile(theBlob);
          copy.setTrashed(true); // Delete the original file
          break;
        case 'KEEP':
          url = doc.getUrl();
          newDocID = doc.getId();
          doc.saveAndClose();
          doc = DriveApp.getFileById(newDocID);
          break;
        default:
      }

      // Autonumeration

      if (numerationSwitch) {
        newNames = `${newNames}_${String(index).padStart(3, '0')}`;
        doc.setName(newNames);
      }

      url = doc.getUrl();
      sh.getRange(index + 1, indexNameCell + 1).setValue(`=hyperlink("${url}";"${newNames}")`); // Filename Link Cell
      sh.getRange(index + 1, indexUrlCell + 1).setValue(url).setNote(null).setNote(`Actualizado por ${userMail} el ${dateNow}`); // URL Link Cell

      // File Permission

      if (permission2) {
        doc.setSharing(DriveApp.Access.DOMAIN, DriveApp.Permission.VIEW);
      }
      if (permission3) {
        doc.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
      }
    });
  }

  /*
   * CODE MARKER
   * Init Email Sending
  */

  if (emailActivate) {
    // Get index of selected columns

    let dropdownValues = flatten(emailDropdown());

    let indexEmail; let indexEmailLinks; let idx;

    if (dropdownValues.indexOf('[DS] Email-links') > -1) {
      indexEmailLinks = fieldIndex(sh, mailurlField);
    } else {
      addGreenColumn(sh, '[DS] Email-links', '');
      indexEmailLinks = fieldIndex(sh, mailurlField);
      sh.setColumnWidth(indexUrlCell + 1, 300);
    }

    indexEmail = fieldIndex(sh, emailField);

    // Replace in subject and message

    let dropdownValuesWithMarker = dropdownValues.map((i) => `{{${i}}}`);
    let lastColmn = sh.getLastColumn();

    let headerValues; let fileID; let file; let adress; let emailSubjectReplaced; let emailMessageReplaced; let linkMail;

    let mailId; let indexFile;

    if (emailAttachSwitch) {
      if (emailAttachField === 'default') {
        indexFile = fieldIndex(sh, fileurlField);
      } else {
        indexFile = fieldIndex(sh, emailAttachField);
      }
    }

    SpreadsheetApp.flush();
    let rows2 = sh.getDataRange().getValues();

    rows2.forEach((row, index) => {
      if (index === 0) return; // Check if this row is the headers, if so we skip it
      if (row[indexEmail] === '') return;
      if (allEmails === false) { if (row[indexEmailLinks]) return } // Check if a document has already been generated by looking at 'Document Link', if so we skip it

      if (dropdownValuesWithMarker.some((v) => emailSubject.includes(v))) {
        for (let i = 0; i < lastColmn; i += 1) {
          headerValues = sh.getRange(1, i + 1).getValue();
          headerValues = `${`{{${headerValues}}}`}`;
          if (emailSubject.indexOf(headerValues) > -1) {
            emailSubjectReplaced = emailSubject.replace(headerValues, row[i]);
          }
        }
      } else {
        emailSubjectReplaced = emailSubject;
      }
      if (dropdownValuesWithMarker.some((v) => emailMessage.includes(v))) {
        for (let i = 0; i < lastColmn; i += 1) {
          headerValues = sh.getRange(1, i + 1).getValue();
          headerValues = `${`{{${headerValues}}}`}`;
          if (emailMessage.indexOf(headerValues) > -1) {
            emailMessageReplaced = emailMessage.replace(headerValues, row[i]);
          }
        }
      } else {
        emailMessageReplaced = emailMessage;
      }

      // Set emails

      adress = row[indexEmail];

      let mailOptions = {
        name: emailSender || 'Morph Estudio',
        cc: emailSpecific,
        bcc: emailBCC,
        replyTo: emailReplyTo,
        htmlBody: emailMessageReplaced || 'Este correo ha sido enviado automáticamente desde el Google Workspace de Morph Estudio.',
      };

      if (emailAttachSwitch) {
        fileID = getIdFromUrl(row[indexFile]);
        file = DriveApp.getFileById(fileID);
        mailOptions.attachments = [file]
      }

      mailId = GmailApp.createDraft(adress, emailSubjectReplaced || 'Morph Document Studio', '', mailOptions).send().getId();

      // Set mail-link to sheet

      linkMail = `https://mail.google.com/mail/u/0/?tab=rm#sent/${mailId}`;
      sh.getRange(index + 1, indexEmailLinks + 1).setValue(linkMail).setNote(null).setNote(`Enviado por ${userMail} el ${dateNow}`);
    });
  } // if email-activate bracket
}

/**
 * Gsuite Morph Tools - Morph Document Studio - Get Markers
 * Developed by alsanchezromero
 *
 * Copyright (c) 2022 Morph Estudio
 */

function getMarkers(rowData) {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getActiveSheet();

  // Data + Variables

  let formData = [rowData.templateID, rowData.greenCells, rowData.purgeMarkers];
  let [docURL, greenCells, purgeMarkers] = formData;

  let filenameField = '[DS] Files'; let fileurlField = '[DS] File-links'; let mailurlField = '[DS] Email-links';

  let dataReturn = getGreenColumns(sh, filenameField, fileurlField);

  let indexData = [
    dataReturn.indexNameCell,
    dataReturn.indexUrlCell,
  ];

  let [indexNameCell, indexUrlCell] = indexData;

  let docID;
  let sheetEmpty = sh.getLastColumn();

  if (greenCells) {
    docURL = sh.getRange(1, indexNameCell + 1).getNotes();
    docID = getIdFromUrl(docURL[0][0]);
  } else {
    docID = getIdFromUrl(docURL);
  }

  dataReturn = getInternallyMarkers(docID)

  indexData = [
    dataReturn.docMarkers,
    dataReturn.gDocTemplate,
    dataReturn.fileType,
  ];

  let [docMarkers, gDocTemplate,fileType] = indexData;

  let notAllMarkersChanged; let headerValues; let updatedValues = [];
  
  let driverArray = docMarkers.flat(); // Slicing {} markers for enhancing interface.
  driverArray.forEach((el) => {
    let sliced = el.slice(2, -2);
    updatedValues.push(sliced);
  });

  // Purge Markers

  if (purgeMarkers) {

    headerValues = flatten(emailDropdown()).filter(e => e !== filenameField && e !== fileurlField && e !== mailurlField);

    if (headerValues.length != 0) {
      notAllMarkersChanged = updatedValues.some(element => {
        return headerValues.includes(element);
      })

      if (notAllMarkersChanged) {
        columnRemover(sh, updatedValues, headerValues);
      } else {
        indexNameCell = fieldIndex(sh, filenameField);
        sh.deleteColumns(1, indexNameCell);
      }
    }
  }

  // Add New Markers

  headerValues = flatten(emailDropdown()).filter(e => e !== filenameField && e !== fileurlField && e !== mailurlField);

  updatedValues.forEach((a, index) => {
    if (headerValues.indexOf(a) === -1) {
      if (index === 0) {
        sh.insertColumns(index + 1);
      } else {
        sh.insertColumnAfter(index);
      }
      sh.setColumnWidth(index + 1, 150);
      let headerCell = sh.getRange(1, index + 1, 1, 1);
      headerCell.setValue(a);
    }
  });

  // Style

  indexNameCell = fieldIndex(sh, filenameField);

  if (sheetEmpty <= 2 || notAllMarkersChanged === false) {
    sh.getRange(1, 1, 1, indexNameCell).clearFormat();
  }

  sh.getRange(1, 1, 1, sh.getMaxColumns()).setFontWeight('bold').setHorizontalAlignment('center');
  sh.setFrozenRows(1);
  removeEmptyColumns();
}
















function getDocItems(docID, identifier) {
  let body = DocumentApp.openById(docID).getBody();
  let docText = body.getText();

  // Check if search characters are to be included.
  let startLen = identifier.start_include ? 0 : identifier.start.length;
  let endLen = identifier.end_include ? 0 : identifier.end.length;

  // Set up the reference loop
  let textStart = 0;
  let doc = docText;
  let docList = [];

  // Loop through text grab the identifier items. Start loop from last set of end identfiers.
  while (textStart > -1) {
    textStart = doc.indexOf(identifier.start);

    if (textStart === -1) {
      break;
    } else {
      let textEnd = doc.indexOf(identifier.end) + identifier.end.length;
      let word = doc.substring(textStart, textEnd);

      doc = doc.substring(textEnd);
      docList.push(word.substring(startLen, word.length - endLen));
    }
  }

  // Return a unique set of identifiers.
  return [...new Set(docList)];
}

function getSlidesItems(docID, identifier) {
  let slides = SlidesApp.openById(docID).getSlides();

  let sumaTextos = [];
  slides.forEach((slide) => {
    let shapes = (slide.getShapes());
    shapes.forEach((shape) => {
      let textito = shape.getText().asString();
      sumaTextos.push(textito);
    });
  });

  let docText = sumaTextos.toString();

  // Check if search characters are to be included.
  let startLen = identifier.start_include ? 0 : identifier.start.length;
  let endLen = identifier.end_include ? 0 : identifier.end.length;

  // Set up the reference loop
  let textStart = 0;
  let doc = docText;
  let docList = [];

  // Loop through text grab the identifier items. Start loop from last set of end identfiers.
  while (textStart > -1) {
    textStart = doc.indexOf(identifier.start);

    if (textStart === -1) {
      break;
    } else {
      let textEnd = doc.indexOf(identifier.end) + identifier.end.length;
      let word = doc.substring(textStart, textEnd);

      doc = doc.substring(textEnd);
      docList.push(word.substring(startLen, word.length - endLen));
    }
  }

  // Return a unique set of identifiers.
  return [...new Set(docList)];
}

function columnRemover(sh, updatedValues, headerValues) {
  let deleteColumn = [];
  headerValues.forEach((a, index) => {
    let i = updatedValues.indexOf(a);
    if (i === -1) {
      deleteColumn.push(index + 1);
    }
  });

  let lastColmn;
  for (let j = headerValues.length; j > 0; j--) {
    if (deleteColumn.indexOf(j) === -1) {
    } else {
      lastColmn = sh.getLastColumn();
      if (lastColmn > 1) {
        sh.deleteColumn(j);
      } else {
        sh.insertColumnAfter(lastColmn);
        sh.deleteColumn(j);
      }
    }
  }
}

function isGreenCell(lastCell) {
  let mycell = SpreadsheetApp.getActiveSheet().getRange(1, lastCell);
  let bgHEX = mycell.getBackground();
  if (bgHEX == '#ecfdf5') {
    return true;
  }
  return false;
}

function getInternallyMarkers(docID) {
  let identifier = {
    start: '{{',
    start_include: true,
    end: '}}',
    end_include: true,
  };

  let gDocTemplate = DriveApp.getFileById(docID);
  let fileType = gDocTemplate.getMimeType();
  let docMarkers;

  switch (fileType) {
    case MimeType.GOOGLE_DOCS:
      docMarkers = getDocItems(docID, identifier);
      break;
    case MimeType.GOOGLE_SLIDES:
      docMarkers = getSlidesItems(docID, identifier);
      break;
    default:
  }

  let dataReturn = {
    docMarkers,
    gDocTemplate,
    fileType,
  };
  return dataReturn;
}

// DOCUMENT-STUDIO FUNCTIONS

function getGreenColumns(sh, filenameField, fileurlField) {
  if (sh.getLastColumn() === 0) {
    addGreenColumn(sh, '[DS] Files', 'Celdas verdes: para usar la opción "usar celdas verdes" debes sustituir esta nota con la URL de la plantilla.');
    var indexNameCell = fieldIndex(sh, filenameField);
    sh.setColumnWidth(indexNameCell + 1, 300);
  };

  let dropdownValues = flatten(emailDropdown());

  if (dropdownValues.indexOf(filenameField) > -1) {
    var indexNameCell = fieldIndex(sh, filenameField);
  } else {
    addGreenColumn(sh, '[DS] Files', 'Celdas verdes: para usar la opción "usar celdas verdes" debes sustituir esta nota con la URL de la plantilla.');
    var indexNameCell = fieldIndex(sh, filenameField);
    sh.setColumnWidth(indexNameCell + 1, 300);
  }
  if (dropdownValues.indexOf(fileurlField) > -1) {
    var indexUrlCell = fieldIndex(sh, fileurlField);
  } else {
    addGreenColumn(sh, '[DS] File-links', 'Celdas verdes: para usar la opción "usar celdas verdes" debes sustituir esta nota con la URL de la carpeta de destino.');
    var indexUrlCell = fieldIndex(sh, fileurlField);
    sh.setColumnWidth(indexUrlCell + 1, 300);
  }

  let dataReturn = {
    indexNameCell,
    indexUrlCell,
  };
  return dataReturn;
}

function addGreenColumn(sh, headerTitle, cellNote) {
  let lastColmn = sh.getLastColumn();

  if (lastColmn === 0) {
    sh.insertColumns(1);
    sh.getRange(1, lastColmn + 1).setBackground('#ECFDF5').setFontColor('#00C853').setValue(headerTitle)
      .setNote(cellNote);
  } else {
    sh.insertColumnAfter(lastColmn);
    sh.getRange(1, lastColmn + 1).setBackground('#ECFDF5').setFontColor('#00C853').setValue(headerTitle)
      .setNote(cellNote);
  }
}

function emailDropdown() { // If dropdown options are in a Google Sheet
  let dropdownValues = sh().getRange(1, 1, 1, sh().getLastColumn()).getValues(); 
  dropdownValues = transpose(dropdownValues);
  return dropdownValues;
}

function fieldIndex(sh, fieldName) {
  SpreadsheetApp.flush();
  let dropdownValues = sh.getRange(1, 1, 1, sh.getLastColumn()).getValues().flat().filter(r=>r!="");
  //dropdownValues = transpose(dropdownValues);
  //dropdownValues = [].concat.apply([], dropdownValues);
  idx = dropdownValues.findIndex(item => item.includes(fieldName));
  return idx;
}

function imageFromTextDocs(body, searchText, image) {
  let next = body.findText(searchText);
  let atts = body.getAttributes();
  if (!next) return;
  let r = next.getElement();
  r.asText().setText('');
  let img = r.getParent().asParagraph().insertInlineImage(0, image);

  let w = img.getWidth();
  let h = img.getHeight();
  // el ratio es por h/w o entre w/h
  let mr = atts['MARGIN_RIGHT'];
  let ml = atts['MARGIN_LEFT'];
  let sw = atts['PAGE_WIDTH'];
  let sh = atts['PAGE_HEIGHT'];

  if (w > sw) {
    img.setWidth(sw);
    img.setHeight((sw * h) / w);
  }
}

function imageFromTextDocsCustomWidth(body, searchText, image, width) {
  let next = body.findText(searchText);
  let atts = body.getAttributes();
  if (!next) return;
  let r = next.getElement();
  r.asText().setText('');
  let img = r.getParent().asParagraph().insertInlineImage(0, image);
  let w = img.getWidth();
  let h = img.getHeight();
  let sw = atts['PAGE_WIDTH'];

  if (width > sw) {
    img.setWidth(sw);
    img.setHeight((sw * h) / w);
  } else {
    img.setWidth(width);
    img.setHeight((width * h) / w);
  }
}

function replaceDocText(repText, newText, copyId) {
  let replaceRules = [
    {
      toReplace: repText,
      newValue: newText,
    }];
  const requestBuild = replaceRules.map(rule => {
    let replaceAllTextRequest = Docs.newReplaceAllTextRequest();
    replaceAllTextRequest.replaceText = rule.newValue;
    replaceAllTextRequest.containsText = Docs.newSubstringMatchCriteria();
    replaceAllTextRequest.containsText.text = rule.toReplace;
    replaceAllTextRequest.containsText.matchCase = false;
    let request = Docs.newRequest();
    request.replaceAllText = replaceAllTextRequest;
    return request;
  });

  let batchUpdateRequest = Docs.newBatchUpdateDocumentRequest();
  batchUpdateRequest.requests = requestBuild;
  let result = Docs.Documents.batchUpdate(batchUpdateRequest, copyId);
}

function imageFromTextSlides(slides, searchText, imageUrl) {
  slides.forEach((slide) => {
    slide.getShapes().forEach((s) => {
      if (s.getText().asString().includes(searchText)) {
        s.replaceWithImage(imageUrl, true);
      }
    });
  });
}

function replaceSlideText(slides, replaceText, markerText, copyId) {
  slides.forEach((slide) => {
    let pageElementId = slide.getObjectId();
    let resource = {
      requests: [{
        replaceAllText: {
          pageObjectIds: [pageElementId],
          replaceText,
          containsText: { matchCase: false, text: markerText },
        },
      }],
    };
    let result = Slides.Presentations.batchUpdate(resource, copyId);
  });
}

function setDocProperties(rowData) {
  let formData = [
    rowData.dsActivate,
    rowData.emailActivate,

    rowData.templateID,
    rowData.greenCells,

    rowData.destinationFolder,
    rowData.fileName,
    rowData.exportFormat,
    rowData.permission1,
    rowData.permission2,
    rowData.permission3,
    rowData.numerationSwitch,

    rowData.emailField,
    rowData.emailSpecific,
    rowData.emailSender,
    rowData.emailSubject,
    rowData.emailMoreFields,
    rowData.emailBCC,
    rowData.emailReplyTo,
    rowData.emailMessage,
    rowData.emailAttachSwitch,
    rowData.emailAttachField,

    rowData.allDocuments,
    rowData.allEmails,
  ];

  let [dsActivate, emailActivate, templateID, greenCells, destinationFolder, fileName, exportFormat, permission1, permission2, permission3, numerationSwitch, emailField, emailSpecific, emailSender, emailSubject, emailMoreFields, emailBCC, emailReplyTo, emailMessage, emailAttachSwitch, emailAttachField, allDocuments, allEmails] = formData;

  PropertiesService.getDocumentProperties().setProperties({
    'DS Activate': dsActivate,
    'Email Activate': emailActivate,

    'Template Link': templateID,
    'Green Cells': Boolean(greenCells),

    'Destination Folder': destinationFolder,
    'Filename': fileName,
    'Export Format': exportFormat,
    'Permission 1': permission1,
    'Permission 2': permission2,
    'Permission 3': permission3,
    'Numeration Switch': numerationSwitch,

    'Email Field': emailField,
    'Email Specific': emailSpecific,
    'Email Sender': emailSender,
    'Email Subject': emailSubject,
    'Email More Fields': emailMoreFields,
    'Email BCC': emailBCC,
    'Email Reply To': emailReplyTo,
    'Email Message': emailMessage,
    'Email Attach Switch': emailAttachSwitch,
    'Email Attach Field': emailAttachField,

    'All Documents': allDocuments,
    'All Emails': allEmails,
  });
}

function deleteProperties() {
  PropertiesService.getDocumentProperties().deleteAllProperties();
}

function deleteProperty(e) {
  PropertiesService.getDocumentProperties().deleteProperty(e);
}

function getDocProperties(e) {
  let props = PropertiesService.getDocumentProperties().getProperties();
  //Logger.log(props);
  /*
  let documentProperties = PropertiesService.getDocumentProperties().getProperties()
  let a = documentProperties['Email Message'];
  let b = documentProperties['All Emails'];
  Logger.log('all property: ' + a + b)
  */
  return props;
}

function getDocProperty(e) {
  let prop = PropertiesService.getDocumentProperties().getProperty(e)
  return prop;
}

