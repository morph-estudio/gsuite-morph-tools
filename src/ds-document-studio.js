/**
 * Gsuite Morph Tools - Morph Document Studio 1.5.0
 * Developed by alsanchezromero
 *
 * Copyright (c) 2022 Morph Estudio
 */

function documentStudio(rowData) {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getActiveSheet();

  let formData = [
    rowData.dsActivate,
    rowData.emailActivate,

    rowData.templateID,
    rowData.greenCells,

    rowData.destinationFolder,
    rowData.fileName,
    rowData.exportFormat,
    rowData.permission1,
    rowData.permission2,
    rowData.permission3,
    rowData.numerationSwitch,

    rowData.emailField,
    rowData.emailSpecific,
    rowData.emailSender,
    rowData.emailSubject,
    rowData.emailMoreFields,
    rowData.emailBCC,
    rowData.emailReplyTo,
    rowData.emailMessage,
    rowData.emailAttachSwitch,
    rowData.emailAttachField,

    rowData.allDocuments,
    rowData.allEmails,
  ];

  let [dsActivate, emailActivate, templateID, greenCells, destinationFolder, fileName, exportFormat, permission1, permission2, permission3, numerationSwitch, emailField, emailSpecific, emailSender, emailSubject, emailMoreFields, emailBCC, emailReplyTo, emailMessage, emailAttachSwitch, emailAttachField, allDocuments, allEmails] = formData;

  let userMail = Session.getActiveUser().getEmail();
  let dateNow = Utilities.formatDate(new Date(), 'GMT+2', 'dd/MM/yyyy - HH:mm:ss');

  let filenameField = '[DS] Files'; let fileurlField = '[DS] File-links'; let mailurlField = '[DS] Email-links';

  let dataReturn = getGreenColumns(sh, filenameField, fileurlField);
  let indexData = [
    dataReturn.indexNameCell,
    dataReturn.indexUrlCell,
  ];

  let [indexNameCell, indexUrlCell] = indexData;

  /*
   * CODE MARKER
   * Init Document Merge
  */

  if (dsActivate) {
    let docID; let destFolderID;

    if (greenCells) {
      templateID = sh.getRange(1, indexNameCell + 1).getNotes();
      docID = getIdFromUrl(templateID[0][0]);
      destinationFolder = sh.getRange(1, indexUrlCell + 1).getNotes();
      destFolderID = getIdFromUrl(destinationFolder[0][0]);
      destinationFolder = DriveApp.getFolderById(destFolderID);
    } else {
      docID = getIdFromUrl(templateID);
      if (destinationFolder === '') {
        let rootFolder = DriveApp.getRootFolder(); // Create temporal folder if destFolder is empty
        destinationFolder = rootFolder.createFolder('Morph Document Studio Files');
      } else {
          destFolderID = getIdFromUrl(destinationFolder);
          destinationFolder = DriveApp.getFolderById(destFolderID);
      }
    }

    // Body Iteration

    let lastColmn = sh.getLastColumn();
    let gDocTemplate = DriveApp.getFileById(docID);
    let fileType = gDocTemplate.getMimeType();

    SpreadsheetApp.flush();
    let rows = sh.getDataRange().getValues();

    var doc; var newNames; var headerValues; var value;

    rows.forEach((row, index) => {
      if (index === 0) return; // Check if this row is the headers, if so we skip it
      if (allDocuments === false) { if (row[indexUrlCell]) return } // Check if a document has already been generated by looking at 'Document Link', if so we skip it

      let copy = gDocTemplate.makeCopy(fileName, destinationFolder); // Copy of Template (`DS ${row[0]}, ${row[1]}`, destinationFolder)
      let copyId = copy.getId();

      switch (fileType) {
        case MimeType.GOOGLE_DOCS:
          doc = DocumentApp.openById(copy.getId()); // Open Copy using DocumentApp

          for (var i = 0; i < lastColmn; i += 1) {
            headerValues = sh.getRange(1, i + 1).getValue();
            newNames = doc.getName().replace(`${`{{${headerValues}}}`}`, row[i]);
            doc.setName(newNames);
          }

          var body = doc.getBody(); // Get content of doc

          // Text Replacing

          var customWidth; var checkURL; var checkIMG; var imageID; var imageFile; var imageType; var image; var response; var width;

          for (var i = 0; i < indexNameCell - 1; i += 1) {
            headerValues = sh.getRange(1, i + 1).getValue();
            value = sh.getRange(index + 1, i + 1).getValue().toString();
            let output = [];
            if (value.includes('{w=')) {
              let t = value.split('{w=');
              t.forEach((q) => {
                output.push([q]);
              });
              value = output[0].toString();
              width = parseInt(output[1].toString().replace('}', ''), 10).toFixed(0);
              customWidth = true;
            } else { customWidth = false; }

            let replaceText = `${`{{${headerValues}}}`}`;
            checkURL = isValidHttpUrl(`${value}`);
            checkIMG = isImage(`${value}`);

            if (checkURL == true) {
              if (value.indexOf('drive.google.com/file') > -1) {
                imageID = getIdFromUrl(value);
                imageFile = DriveApp.getFileById(imageID);
                imageType = imageFile.getMimeType();

                if (imageType == 'JPEG', 'PNG', 'GIF') {
                  imageFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
                  image = DriveApp.getFileById(imageID).getBlob();

                  if (customWidth == false) {
                    imageFromTextDocs(body, replaceText, image);
                  } else {
                    imageFromTextDocsCustomWidth(body, replaceText, image, width);
                  }
                }
              } else if (checkIMG == true) {
                response = UrlFetchApp.fetch(`${`${value}`}`);
                image = response.getBlob();

                if (customWidth == false) {
                  imageFromTextDocs(body, replaceText, image);
                } else {
                  imageFromTextDocsCustomWidth(body, replaceText, image, width);
                }
              } else {
                replaceDocText(`${`{{${headerValues}}}`}`, `${row[i]}`, copyId);
              }
            } else {
              replaceDocText(`${`{{${headerValues}}}`}`, `${row[i]}`, copyId);
            }
          }

          break;
        case MimeType.GOOGLE_SLIDES:
          doc = SlidesApp.openById(copy.getId());

          for (let i = 0; i < lastColmn; i += 1) {
            headerValues = sh.getRange(1, i + 1).getValue();
            newNames = doc.getName().replace(`${`{{${headerValues}}}`}`, row[i]);
            doc.setName(newNames);
          }

          let slides = doc.getSlides();

          // TEXT REPLACING

          for (let i = 0; i < indexNameCell - 1; i += 1) {
            headerValues = sh.getRange(1, i + 1).getValue();
            var searchText = `${`{{${headerValues}}}`}`;
            value = sh.getRange(index + 1, i + 1).getValue().toString();
            checkURL = isValidHttpUrl(`${value}`);
            checkIMG = isImage(`${value}`);

            if (checkURL == true) {
              if (value.indexOf("drive.google.com/file") > -1) {
                imageID = getIdFromUrl(value);
                imageFile = DriveApp.getFileById(imageID);
                imageType = imageFile.getMimeType();

                if (imageType == 'JPEG', 'PNG', 'GIF') {
                  imageFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
                  image = DriveApp.getFileById(imageID).getBlob();
                  imageFromTextSlides(slides, searchText, image);
                }
              } else if (checkIMG == true) {
                //var imageUrl = `${''+value}`;
                response = UrlFetchApp.fetch(`${`${value}`}`);
                image = response.getBlob();
                imageFromTextSlides(slides, searchText, image);
              } else {
                replaceSlideText(slides, `${row[i]}`, `${`{{${headerValues}}}`}`, copyId);
              }
            } else {
              replaceSlideText(slides, `${row[i]}`, `${`{{${headerValues}}}`}`, copyId);
            }
          }
          break;
        default:
      }

      // Export Options

      let url; let newDocID;
      switch (exportFormat) {
        case 'PDF':
          doc.saveAndClose();
          newDocID = doc.getId();
          let templateFile = DriveApp.getFileById(newDocID);
          let theBlob = templateFile.getBlob().getAs('application/pdf');
          doc = destinationFolder.createFile(theBlob);
          copy.setTrashed(true); // Delete the original file
          break;
        case 'KEEP':
          url = doc.getUrl();
          newDocID = doc.getId();
          doc.saveAndClose();
          doc = DriveApp.getFileById(newDocID);
          break;
        default:
      }

      // Autonumeration

      if (numerationSwitch) {
        newNames = `${newNames}_${String(index).padStart(3, '0')}`;
        doc.setName(newNames);
      }

      url = doc.getUrl();
      sh.getRange(index + 1, indexNameCell + 1).setValue(`=hyperlink("${url}";"${newNames}")`); // Filename Link Cell
      sh.getRange(index + 1, indexUrlCell + 1).setValue(url).setNote(null).setNote(`Actualizado por ${userMail} el ${dateNow}`); // URL Link Cell

      // File Permission

      if (permission2) {
        doc.setSharing(DriveApp.Access.DOMAIN, DriveApp.Permission.VIEW);
      }
      if (permission3) {
        doc.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
      }
    });
  }

  /*
   * CODE MARKER
   * Init Email Sending
  */

  if (emailActivate) {
    // Get index of selected columns

    let dropdownValues = flatten(emailDropdown());

    let indexEmail; let indexEmailLinks; let idx;

    if (dropdownValues.indexOf('[DS] Email-links') > -1) {
      indexEmailLinks = fieldIndex(sh, mailurlField);
    } else {
      addGreenColumn(sh, '[DS] Email-links', '');
      indexEmailLinks = fieldIndex(sh, mailurlField);
      sh.setColumnWidth(indexUrlCell + 1, 300);
    }

    indexEmail = fieldIndex(sh, emailField);

    // Replace in subject and message

    let dropdownValuesWithMarker = dropdownValues.map((i) => `{{${i}}}`);
    let lastColmn = sh.getLastColumn();

    let headerValues; let fileID; let file; let adress; let emailSubjectReplaced; let emailMessageReplaced; let linkMail;

    let mailId; let indexFile;

    if (emailAttachSwitch) {
      if (emailAttachField === 'default') {
        indexFile = fieldIndex(sh, fileurlField);
      } else {
        indexFile = fieldIndex(sh, emailAttachField);
      }
    }

    SpreadsheetApp.flush();
    let rows2 = sh.getDataRange().getValues();

    rows2.forEach((row, index) => {
      if (index === 0) return; // Check if this row is the headers, if so we skip it
      if (row[indexEmail] === '') return;
      if (allEmails === false) { if (row[indexEmailLinks]) return } // Check if a document has already been generated by looking at 'Document Link', if so we skip it

      if (dropdownValuesWithMarker.some((v) => emailSubject.includes(v))) {
        for (let i = 0; i < lastColmn; i += 1) {
          headerValues = sh.getRange(1, i + 1).getValue();
          headerValues = `${`{{${headerValues}}}`}`;
          if (emailSubject.indexOf(headerValues) > -1) {
            emailSubjectReplaced = emailSubject.replace(headerValues, row[i]);
          }
        }
      } else {
        emailSubjectReplaced = emailSubject;
      }
      if (dropdownValuesWithMarker.some((v) => emailMessage.includes(v))) {
        for (let i = 0; i < lastColmn; i += 1) {
          headerValues = sh.getRange(1, i + 1).getValue();
          headerValues = `${`{{${headerValues}}}`}`;
          if (emailMessage.indexOf(headerValues) > -1) {
            emailMessageReplaced = emailMessage.replace(headerValues, row[i]);
          }
        }
      } else {
        emailMessageReplaced = emailMessage;
      }

      // Set emails

      adress = row[indexEmail];

      let mailOptions = {
        name: emailSender || 'Morph Estudio',
        cc: emailSpecific,
        bcc: emailBCC,
        replyTo: emailReplyTo,
        htmlBody: emailMessageReplaced || 'Este correo ha sido enviado automáticamente desde el Google Workspace de Morph Estudio.',
      };

      if (emailAttachSwitch) {
        fileID = getIdFromUrl(row[indexFile]);
        file = DriveApp.getFileById(fileID);
        mailOptions.attachments = [file]
      }

      mailId = GmailApp.createDraft(adress, emailSubjectReplaced || 'Morph Document Studio', '', mailOptions).send().getId();

      // Set mail-link to sheet

      linkMail = `https://mail.google.com/mail/u/0/?tab=rm#sent/${mailId}`;
      sh.getRange(index + 1, indexEmailLinks + 1).setValue(linkMail).setNote(null).setNote(`Enviado por ${userMail} el ${dateNow}`);
    });
  } // if email-activate bracket
}
